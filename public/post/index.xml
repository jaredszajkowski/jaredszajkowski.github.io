<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Jared Szajkowski</title>
        <link>https://jaredszajkowski.github.io/post/</link>
        <description>Recent content in Posts on Jared Szajkowski</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 15 Nov 2023 00:00:01 +0000</lastBuildDate><atom:link href="https://jaredszajkowski.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Cleaning A Bloomberg Data Excel Export</title>
        <link>https://jaredszajkowski.github.io/archives/cleaning-a-bloomberg-data-excel-export/</link>
        <pubDate>Wed, 15 Nov 2023 00:00:01 +0000</pubDate>
        
        <guid>https://jaredszajkowski.github.io/archives/cleaning-a-bloomberg-data-excel-export/</guid>
        <description>&lt;p&gt;In this tutorial, we will write a python function that imports an excel export from Bloomberg, removes ancillary rows and columns, and leaves the data in a format where it can then be used in time series analysis.&lt;/p&gt;
&lt;h2 id=&#34;example-of-a-bloomberg-excel-export&#34;&gt;Example of a Bloomberg excel export&lt;/h2&gt;
&lt;p&gt;We will use the SPX index data in this example. Exporting the data from Bloomberg using the excel Bloomberg add-on yields data in the following format:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jaredszajkowski.github.io/archives/cleaning-a-bloomberg-data-excel-export/Format_of_data_in_excel_export_from_Bloomberg.png&#34;
	width=&#34;399&#34;
	height=&#34;465&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Format of data in excel export from Bloomberg&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;85&#34;
		data-flex-basis=&#34;205px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;data-modifications&#34;&gt;Data modifications&lt;/h2&gt;
&lt;p&gt;The above format isn&amp;rsquo;t horrible, but we want to perform the following modifications:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remove the first six rows of the data&lt;/li&gt;
&lt;li&gt;Convert the 7th row to become column headings&lt;/li&gt;
&lt;li&gt;Rename column 2 to &amp;ldquo;Close&amp;rdquo; to represent the closing price&lt;/li&gt;
&lt;li&gt;Remove column 3, as we are not concerned about volume&lt;/li&gt;
&lt;li&gt;Make the name of the excel worksheet &amp;ldquo;data&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;
&lt;p&gt;The remainder of this tutorial assumes that your excel file is named &amp;ldquo;SPX_Index.xlsx&amp;rdquo;, and the worksheet is named &amp;ldquo;Worksheet&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;python-function-to-modify-the-data&#34;&gt;Python function to modify the data&lt;/h2&gt;
&lt;p&gt;The following function will perform the modifications mentioned above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import pandas as pd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# This function takes an excel export from Bloomberg and 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# removes all excess data leaving date and close columns
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;def bb_data_updater(fund):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # File name
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    file = fund + &amp;#34;_Index.xlsx&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # Import data from file as dataframe and drop rows and columns
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data = pd.read_excel(file, sheet_name = &amp;#39;Worksheet&amp;#39;, engine=&amp;#39;openpyxl&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data.columns = data.iloc[5]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data.rename_axis(None, axis=1, inplace = True)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data.drop(data.index[0:6], inplace=True)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data.set_index(&amp;#39;Date&amp;#39;, inplace = True)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    try:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        data.drop(columns = {&amp;#39;PX_VOLUME&amp;#39;}, inplace = True)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    except KeyError:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        pass
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data.rename(columns = {&amp;#39;PX_LAST&amp;#39;:&amp;#39;Close&amp;#39;}, inplace = True)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data.sort_values(by=[&amp;#39;Date&amp;#39;], inplace = True)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # Export data to excel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    file = fund + &amp;#34;.xlsx&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    data.to_excel(file, sheet_name=&amp;#39;data&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    # Output confirmation
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    print(f&amp;#34;The last date of data for {fund} is: &amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    print(data[-1:])
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    print(f&amp;#34;Bloomberg data conversion complete for {fund} data&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return print(f&amp;#34;--------------------&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s break this down line by line.&lt;/p&gt;
&lt;h2 id=&#34;imports&#34;&gt;Imports&lt;/h2&gt;
&lt;p&gt;First, we need to import pandas:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be continued.&lt;/p&gt;
&lt;p&gt;{{% This tutorial assumes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are booting from a USB drive with the Arch install ISO.&lt;/li&gt;
&lt;li&gt;Wireless or wired network is detected and drivers are configured automatically.&lt;/li&gt;
&lt;li&gt;You want drive encrytion on your root partition, but not on your boot/efi/swap partitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;verify-uefi-boot-mode&#34;&gt;Verify UEFI boot mode&lt;/h3&gt;
&lt;p&gt;The following command should show directory without error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ls /sys/firmware/efi/efivars
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configure-wireless-network&#34;&gt;Configure wireless network&lt;/h3&gt;
&lt;p&gt;The following command will drop you into the iwd daemon:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# iwctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# device list
# station *device* scan
# station *device* get-networks
# station *device* connect *SSID*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;verify-internet-connectivity&#34;&gt;Verify internet connectivity&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# ping archlinux.org
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-system-clock&#34;&gt;Update system clock&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# timedatectl set-ntp true
# timedatectl status
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;disks-partition-table--partitions&#34;&gt;Disks, partition table &amp;amp; partitions&lt;/h2&gt;
&lt;p&gt;The following assumes that your NVME drive is found as /dev/nvme0n1. Partitions will then be /dev/nvme0n1p1 and so on.&lt;/p&gt;
&lt;h3 id=&#34;wipe-disk&#34;&gt;Wipe disk&lt;/h3&gt;
&lt;p&gt;List disks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# fdisk -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wipe all file system records:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# wipefs -a /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-new-partition-table&#34;&gt;Create new partition table&lt;/h3&gt;
&lt;p&gt;Open nvme0n1 with gdisk:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gdisk /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create GPT partition table with option &amp;ldquo;o&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;create-efi-partition&#34;&gt;Create EFI partition&lt;/h3&gt;
&lt;p&gt;Create new EFI partition w/ 550mb with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #1
Default starting sector
+550M
Change partition type to EFI System (ef00)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-boot-partition&#34;&gt;Create boot partition&lt;/h3&gt;
&lt;p&gt;Create new boot partition w/ 550mb with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #2
Default starting sector
+550M
Leave default type of 8300
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-swap-partition&#34;&gt;Create swap partition&lt;/h3&gt;
&lt;p&gt;The old rule of thumb used to be that a swap partition should be the same size as the amount of memory in the system, but given the typical amount of memory in modern systems this is obviously no longer necessary. For my system with 16 or 32 GB of memory, a swap of 8 GB is rarely even used.&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Create new Swap partition w/ 8GB with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #3
Default starting sector
+8G
Change to linux swap (8200)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-root-partition&#34;&gt;Create root partition&lt;/h3&gt;
&lt;p&gt;Create new root partition w/ remaining disk space with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #4
Default starting sector
Remaining space
Linux LUKS type 8309
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then exit gdisk.&lt;/p&gt;
&lt;h2 id=&#34;write-file-systems&#34;&gt;Write file systems&lt;/h2&gt;
&lt;h3 id=&#34;efi-partition&#34;&gt;EFI partition&lt;/h3&gt;
&lt;p&gt;Write file system to new EFI System partition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat /dev/zero &amp;gt; /dev/nvme0n1p1 
# mkfs.fat -F32 /dev/nvme0n1p1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;boot-partition&#34;&gt;Boot partition&lt;/h3&gt;
&lt;p&gt;Then boot partition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat /dev/zero &amp;gt; /dev/nvme0n1p2 
# mkfs.ext2 /dev/nvme0n1p2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;root-partition&#34;&gt;Root partition&lt;/h3&gt;
&lt;p&gt;Prepare root partition w/ LUKS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cryptsetup -y -v luksFormat --type luks2 /dev/nvme0n1p4
# cryptsetup luksDump /dev/nvme0n1p4
# cryptsetup open /dev/nvme0n1p4 archcryptroot
# mkfs.ext4 /dev/mapper/archcryptroot
# mount /dev/mapper/archcryptroot /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;em&gt;archcryptroot&lt;/em&gt; for the name of my encrypted volume, but change as necessary.&lt;/p&gt;
&lt;h3 id=&#34;swap-partition&#34;&gt;Swap partition&lt;/h3&gt;
&lt;p&gt;Then swap:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkswap /dev/nvme0n1p3
# swapon /dev/nvme0n1p3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-mount-points&#34;&gt;Create mount points&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /mnt/boot
# mount /dev/nvme0n1p2 /mnt/boot
# mkdir /mnt/boot/efi
# mount /dev/nvme0n1p1 /mnt/boot/efi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-install&#34;&gt;System install&lt;/h2&gt;
&lt;h3 id=&#34;install-base-packages&#34;&gt;Install base packages&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# pacstrap /mnt base base-devel linux linux-firmware grub-efi-x86_64 efibootmgr
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-fstab&#34;&gt;Generate fstab&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;enter-new-system&#34;&gt;Enter new system&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# arch-chroot /mnt /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-clock&#34;&gt;Set clock&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
# hwclock –systohc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-locale&#34;&gt;Generate locale&lt;/h3&gt;
&lt;p&gt;In /etc/locale.gen &lt;strong&gt;uncomment only&lt;/strong&gt;: en_US.UTF-8 UTF-8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# locale-gen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In /etc/locale.conf, you should &lt;strong&gt;only&lt;/strong&gt; have this line: LANG=en_US.UTF-8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# nano /etc/locale.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-hostname--update-hosts&#34;&gt;Set hostname &amp;amp; update hosts&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# echo linuxmachine &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update /etc/hosts with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost
::1         localhost
127.0.1.1   linuxmachine.localdomain    linuxmachine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-root-password&#34;&gt;Set root password&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-etcmkinitcpioconf--generate-initrd-image&#34;&gt;Update /etc/mkinitcpio.conf &amp;amp; generate initrd image&lt;/h3&gt;
&lt;p&gt;Edit /etc/mkinitcpio.conf with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HOOKS=(base udev autodetect modconf block keymap encrypt resume filesystems keyboard fsck)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkinitcpio -p linux
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-grub&#34;&gt;Install grub&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit /etc/default/grub so it includes a statement like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;cryptdevice=/dev/nvme0n1p4:archcryptroot resume=/dev/nvme0n1p3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate final grub configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;exit--reboot&#34;&gt;Exit &amp;amp; reboot&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# exit
# umount -R /mnt
# swapoff -a
# reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be continued. %}}&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git Quick Start Guide</title>
        <link>https://jaredszajkowski.github.io/archives/git-quick-start-guide/</link>
        <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jaredszajkowski.github.io/archives/git-quick-start-guide/</guid>
        <description>&lt;p&gt;Here are my notes for some of the more commonly used git commands along with initial setup for git in Linux.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;To begin, install as follows for Arch Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pacman -Syu git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ yay git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pacman will include all required depencies.&lt;/p&gt;
&lt;h2 id=&#34;initial-configuration&#34;&gt;Initial configuration&lt;/h2&gt;
&lt;p&gt;First, set your name and email address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;Firstname Lastname&amp;quot;
$ git config --global user.email &amp;quot;email@address.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, set your preferred text editor (if you have one). I use nano:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global core.editor &amp;quot;nano&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can verify the updates with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global core.editor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can edit the git configuration directly with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global --edit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;store-credentials&#34;&gt;Store credentials&lt;/h2&gt;
&lt;p&gt;In 2021, GitHub disabled authentication via password and now requires authentication with a token. The following command sets up the credential helper, where it will store your token in &lt;code&gt;~/.git-credentials&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you log in during a &lt;code&gt;git push&lt;/code&gt; with your username and token, the username or email address and token will be stored in the above location.&lt;/p&gt;
&lt;p&gt;Note: The token is stored in plain text, so use caution if that is a concern.&lt;/p&gt;
&lt;h2 id=&#34;cloning-repositories&#34;&gt;Cloning repositories&lt;/h2&gt;
&lt;p&gt;Repositories can be cloned with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repository&amp;gt;.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;updating-repositories&#34;&gt;Updating repositories&lt;/h2&gt;
&lt;p&gt;The local record of a repository can be updated with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;repository&amp;gt;/
$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;adding-committing-and-pushing&#34;&gt;Adding, committing, and pushing&lt;/h2&gt;
&lt;p&gt;Any files or directories that have been added, modified, or removed can be add to the list of changes to be pushed with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then committed (staged in preparation to push) with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit -am &amp;quot;Add your commit message here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: Without &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt; will handle any changes to files that have been modified or deleted, but will not incorporate any files that have been created.&lt;/p&gt;
&lt;p&gt;Then finally pushed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If, for some reason, you would like to reset a commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git reset
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These commands can be chained together with the AND operator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git add . &amp;amp;&amp;amp; git commit -am &amp;quot;Add your commit message here&amp;quot; &amp;amp;&amp;amp; git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;stashing-changes&#34;&gt;Stashing changes&lt;/h2&gt;
&lt;p&gt;If you forget to update a repository before making changes, you can &amp;ldquo;stash&amp;rdquo; those changes and then re-apply them after running &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, stash the changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git stash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, update the local record of the repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, re-apply the changes you previously made:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git stash apply
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has proven to be very useful for me when I forget to update a repository before making edits to the code.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;References for git (and used for above):&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup#_first_time&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup#_first_time&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage#_credential_caching&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage#_credential_caching&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.geeksforgeeks.org/difference-between-chaining-operators-in-linux/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.geeksforgeeks.org/difference-between-chaining-operators-in-linux/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Using yt-dlp With Zoom</title>
        <link>https://jaredszajkowski.github.io/archives/using-yt-dlp-with-zoom/</link>
        <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jaredszajkowski.github.io/archives/using-yt-dlp-with-zoom/</guid>
        <description>&lt;p&gt;If anyone uses Zoom to record and later wants to access recordings of video calls, here&amp;rsquo;s a simple linux bash script to download the video file and acompanying subtitles. For a long time I used &lt;a class=&#34;link&#34; href=&#34;https://github.com/Battleman/zoomdl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zoomdl&lt;/a&gt;, but it is no longer under active development, and I began running into various issues about a year ago.&lt;/p&gt;
&lt;p&gt;This tutorial requires you to have a &amp;ldquo;cookies&amp;rdquo; text file, which needs to contain the cookies export in the Netscape HTTP format of the Zoom cookies after logging in.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the steps to setting this up:&lt;/p&gt;
&lt;h2 id=&#34;install-cookie-editor&#34;&gt;Install cookie editor&lt;/h2&gt;
&lt;p&gt;Install the &lt;a class=&#34;link&#34; href=&#34;https://microsoftedge.microsoft.com/addons/detail/cookie-editor/ajfboaconbpkglpfanbmlfgojgndmhmc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cookie editor&lt;/a&gt; extension. I personnally use it with Microsoft Edge, but there are similar extensions for Chrome, Firefox, etc.&lt;/p&gt;
&lt;h2 id=&#34;modify-export-format&#34;&gt;Modify export format&lt;/h2&gt;
&lt;p&gt;Change the preferred cookie export format to &lt;code&gt;Netscape HTTP Cookie File&lt;/code&gt; in the extension options. It is necessary to export in this format, otherwise yt-dlp will not be able to read the cookies.txt file correctly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jaredszajkowski.github.io/archives/using-yt-dlp-with-zoom/Modify_preferred_export_format.png&#34;
	width=&#34;865&#34;
	height=&#34;505&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Modify preferred export format&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;log-in-to-zoom&#34;&gt;Log in to Zoom&lt;/h2&gt;
&lt;p&gt;Log in to Zoom in your browser. Be sure to remain logged in while exporting the cookies under step 4.&lt;/p&gt;
&lt;h2 id=&#34;export-cookies&#34;&gt;Export cookies&lt;/h2&gt;
&lt;p&gt;The export button is at the top fo the window. It copies the cookies to your clipboard, which then need to be pasted into a text file (I have my saved as cookies.txt), which yt-dlp will then read when it executes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jaredszajkowski.github.io/archives/using-yt-dlp-with-zoom/Export_cookies.png&#34;
	width=&#34;579&#34;
	height=&#34;613&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Export cookies&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;226px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-bash-script&#34;&gt;Create bash script&lt;/h2&gt;
&lt;p&gt;Save the following code to a text file (my bash script file name is yt-dlp.sh):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;echo What is the link?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;read link
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yt-dlp --referer &amp;#34;https://zoom.us/&amp;#34; --cookies /path/to/cookies/file/cookies.txt -o &amp;#34;%(title)s-%(id)s.%(ext)s&amp;#34; --write-subs $link
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;change-permissions&#34;&gt;Change permissions&lt;/h2&gt;
&lt;p&gt;Modify the permissions of the bash script to allow execution:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chmod +x yt-dlp.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;execute-the-script&#34;&gt;Execute the script&lt;/h2&gt;
&lt;p&gt;Execute the bash script with ./yt-dlp.sh, copy and paste the link to the video that you would like to save, and it should download the video and the subtitles.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;References for yt-dlp (and used for above):&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ostechnix.com/yt-dlp-tutorial/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ostechnix.com/yt-dlp-tutorial/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Arch Linux Laptop Install</title>
        <link>https://jaredszajkowski.github.io/archives/arch-linux-laptop-install/</link>
        <pubDate>Fri, 29 Sep 2023 00:00:01 +0000</pubDate>
        
        <guid>https://jaredszajkowski.github.io/archives/arch-linux-laptop-install/</guid>
        <description>&lt;p&gt;This is the basic framework that I use to install Arch Linux, with a few changes catered to the Lenovo ThinkPad E15 Gen 2. I have found that this is a decent mid range laptop, excellent linux compatibility, great keyboard, and overall provides a good value.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;This tutorial assumes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are booting from a USB drive with the Arch install ISO.&lt;/li&gt;
&lt;li&gt;Wireless or wired network is detected and drivers are configured automatically.&lt;/li&gt;
&lt;li&gt;You want drive encrytion on your root partition, but not on your boot/efi/swap partitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;verify-uefi-boot-mode&#34;&gt;Verify UEFI boot mode&lt;/h3&gt;
&lt;p&gt;The following command should show directory without error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ls /sys/firmware/efi/efivars
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configure-wireless-network&#34;&gt;Configure wireless network&lt;/h3&gt;
&lt;p&gt;The following command will drop you into the iwd daemon:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# iwctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# device list
# station *device* scan
# station *device* get-networks
# station *device* connect *SSID*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;verify-internet-connectivity&#34;&gt;Verify internet connectivity&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# ping archlinux.org
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-system-clock&#34;&gt;Update system clock&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# timedatectl set-ntp true
# timedatectl status
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;disks-partition-table--partitions&#34;&gt;Disks, partition table &amp;amp; partitions&lt;/h2&gt;
&lt;p&gt;The following assumes that your NVME drive is found as /dev/nvme0n1. Partitions will then be /dev/nvme0n1p1 and so on.&lt;/p&gt;
&lt;h3 id=&#34;wipe-disk&#34;&gt;Wipe disk&lt;/h3&gt;
&lt;p&gt;List disks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# fdisk -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wipe all file system records:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# wipefs -a /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-new-partition-table&#34;&gt;Create new partition table&lt;/h3&gt;
&lt;p&gt;Open nvme0n1 with gdisk:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gdisk /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create GPT partition table with option &amp;ldquo;o&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;create-efi-partition&#34;&gt;Create EFI partition&lt;/h3&gt;
&lt;p&gt;Create new EFI partition w/ 550mb with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #1
Default starting sector
+550M
Change partition type to EFI System (ef00)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-boot-partition&#34;&gt;Create boot partition&lt;/h3&gt;
&lt;p&gt;Create new boot partition w/ 550mb with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #2
Default starting sector
+550M
Leave default type of 8300
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-swap-partition&#34;&gt;Create swap partition&lt;/h3&gt;
&lt;p&gt;The old rule of thumb used to be that a swap partition should be the same size as the amount of memory in the system, but given the typical amount of memory in modern systems this is obviously no longer necessary. For my system with 16 or 32 GB of memory, a swap of 8 GB is rarely even used.&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Create new Swap partition w/ 8GB with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #3
Default starting sector
+8G
Change to linux swap (8200)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-root-partition&#34;&gt;Create root partition&lt;/h3&gt;
&lt;p&gt;Create new root partition w/ remaining disk space with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #4
Default starting sector
Remaining space
Linux LUKS type 8309
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then exit gdisk.&lt;/p&gt;
&lt;h2 id=&#34;write-file-systems&#34;&gt;Write file systems&lt;/h2&gt;
&lt;h3 id=&#34;efi-partition&#34;&gt;EFI partition&lt;/h3&gt;
&lt;p&gt;Write file system to new EFI System partition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat /dev/zero &amp;gt; /dev/nvme0n1p1 
# mkfs.fat -F32 /dev/nvme0n1p1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;boot-partition&#34;&gt;Boot partition&lt;/h3&gt;
&lt;p&gt;Then boot partition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat /dev/zero &amp;gt; /dev/nvme0n1p2 
# mkfs.ext2 /dev/nvme0n1p2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;root-partition&#34;&gt;Root partition&lt;/h3&gt;
&lt;p&gt;Prepare root partition w/ LUKS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cryptsetup -y -v luksFormat --type luks2 /dev/nvme0n1p4
# cryptsetup luksDump /dev/nvme0n1p4
# cryptsetup open /dev/nvme0n1p4 archcryptroot
# mkfs.ext4 /dev/mapper/archcryptroot
# mount /dev/mapper/archcryptroot /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;em&gt;archcryptroot&lt;/em&gt; for the name of my encrypted volume, but change as necessary.&lt;/p&gt;
&lt;h3 id=&#34;swap-partition&#34;&gt;Swap partition&lt;/h3&gt;
&lt;p&gt;Then swap:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkswap /dev/nvme0n1p3
# swapon /dev/nvme0n1p3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-mount-points&#34;&gt;Create mount points&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /mnt/boot
# mount /dev/nvme0n1p2 /mnt/boot
# mkdir /mnt/boot/efi
# mount /dev/nvme0n1p1 /mnt/boot/efi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-install&#34;&gt;System install&lt;/h2&gt;
&lt;h3 id=&#34;install-base-packages&#34;&gt;Install base packages&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# pacstrap /mnt base base-devel linux linux-firmware grub-efi-x86_64 efibootmgr
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-fstab&#34;&gt;Generate fstab&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;enter-new-system&#34;&gt;Enter new system&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# arch-chroot /mnt /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-clock&#34;&gt;Set clock&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
# hwclock –systohc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-locale&#34;&gt;Generate locale&lt;/h3&gt;
&lt;p&gt;In /etc/locale.gen &lt;strong&gt;uncomment only&lt;/strong&gt;: en_US.UTF-8 UTF-8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# locale-gen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In /etc/locale.conf, you should &lt;strong&gt;only&lt;/strong&gt; have this line: LANG=en_US.UTF-8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# nano /etc/locale.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-hostname--update-hosts&#34;&gt;Set hostname &amp;amp; update hosts&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# echo linuxmachine &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update /etc/hosts with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost
::1         localhost
127.0.1.1   linuxmachine.localdomain    linuxmachine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-root-password&#34;&gt;Set root password&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-etcmkinitcpioconf--generate-initrd-image&#34;&gt;Update /etc/mkinitcpio.conf &amp;amp; generate initrd image&lt;/h3&gt;
&lt;p&gt;Edit /etc/mkinitcpio.conf with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HOOKS=(base udev autodetect modconf block keymap encrypt resume filesystems keyboard fsck)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkinitcpio -p linux
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-grub&#34;&gt;Install grub&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit /etc/default/grub so it includes a statement like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;cryptdevice=/dev/nvme0n1p4:archcryptroot resume=/dev/nvme0n1p3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate final grub configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;exit--reboot&#34;&gt;Exit &amp;amp; reboot&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# exit
# umount -R /mnt
# swapoff -a
# reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be continued.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hello World</title>
        <link>https://jaredszajkowski.github.io/archives/hello-world/</link>
        <pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate>
        
        <guid>https://jaredszajkowski.github.io/archives/hello-world/</guid>
        <description>&lt;p&gt;Welcome to my website. This is meant to serve as a place for me to publish various posts from my explorations into Arch Linux, data science, quant finance, and other topics.&lt;/p&gt;
&lt;p&gt;The theme has been adopted from the &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Theme Stack&lt;/a&gt; produced by Jimmy Cai.&lt;/p&gt;
&lt;p&gt;This is the only theme that I have found that checks all of the following boxes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Theme for the static site generator Hugo&lt;/li&gt;
&lt;li&gt;Includes modules for archives&lt;/li&gt;
&lt;li&gt;Includes tags and topics/categories&lt;/li&gt;
&lt;li&gt;Includes built-in search functionality&lt;/li&gt;
&lt;li&gt;Simple interface that is easily navigable&lt;/li&gt;
&lt;li&gt;Highly extensible including modules for image galleries, posts, comment capabilities, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is hosted on &lt;a class=&#34;link&#34; href=&#34;https://pages.github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub pages&lt;/a&gt;. I followed the install instructions that the theme author provided, including using GitHub codespace for editing in the cloud. There are only a few details that I ran into that he did not mention.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t forget to run Hugo to build the site. This creates the public directory, which is where the static site files are located.&lt;/li&gt;
&lt;li&gt;Make sure to update the branch to be gh-pages under Settings -&amp;gt; Pages -&amp;gt; Build and deployment -&amp;gt; Branch in GitHub.&lt;/li&gt;
&lt;li&gt;Make sure to remove the public directory from the .gitignore file. Otherwise GitHub will ignore the public directory and your site will show the README.md instead of the Hugo site.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The site can be updated either through codespace, or locally as long as Hugo and it&amp;rsquo;s required dependencies have been installed.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the full list of resources I referenced for deploying Hugo with GitHub pages:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.o11ycloud.com/posts/gh_hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.o11ycloud.com/posts/gh_hugo/&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/CaiJimmy/hugo-theme-stack&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@magstherdev/github-pages-hugo-86ae6bcbadd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/@magstherdev/github-pages-hugo-86ae6bcbadd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One last note, the simple command after making any changes and to push those updates is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -am &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
