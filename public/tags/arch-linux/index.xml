<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Arch Linux on Jared Szajkowski</title>
        <link>https://www.jaredszajkowski.com/tags/arch-linux/</link>
        <description>Recent content in Arch Linux on Jared Szajkowski</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 02 Dec 2024 00:00:01 +0000</lastBuildDate><atom:link href="https://www.jaredszajkowski.com/tags/arch-linux/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Using Python Virtual Environments</title>
        <link>https://www.jaredszajkowski.com/2024/12/02/using-python-virtual-environments/</link>
        <pubDate>Mon, 02 Dec 2024 00:00:01 +0000</pubDate>
        
        <guid>https://www.jaredszajkowski.com/2024/12/02/using-python-virtual-environments/</guid>
        <description>&lt;img src="https://www.jaredszajkowski.com/2024/12/02/using-python-virtual-environments/cover.jpg" alt="Featured image of post Using Python Virtual Environments" /&gt;&lt;h2 id=&#34;python-module-management&#34;&gt;Python Module Management
&lt;/h2&gt;&lt;p&gt;As an Arch Linux user, the push is to utilize pacman and related tools to manage dependencies and package updates (including Python modules). In fact, &lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/title/Python&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the wiki itself&lt;/a&gt; explicitly states this (see 2.1), and the default Arch installation of Python disables python-pip.&lt;/p&gt;
&lt;p&gt;Unfortunately, there are limited resources put into maintaining packages for modules and only the most common and popular modules are maintained, and they are updated promptly as is consistent within the Arch ecosystem.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-virtual-environment&#34;&gt;Creating A Virtual Environment
&lt;/h2&gt;&lt;p&gt;After recently delving into crypto and the web3 Python module, the Coinbase API, and others, I&amp;rsquo;ve found the need to install Python modules from &lt;a class=&#34;link&#34; href=&#34;https://pypi.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pypi&lt;/a&gt;, the Python package index. This is the most exhaustive location to find modules, including the latest updates and version history.&lt;/p&gt;
&lt;p&gt;Using python-pip necessitated the use of virtual environments, which made me reconsider the idea of not maintaining Python modules (or maintaining very few) through pacman at all.&lt;/p&gt;
&lt;p&gt;I chose to place the virtual environments at &lt;code&gt;~/python-virtual-envs/&lt;/code&gt; and within that directory have one called &lt;code&gt;general&lt;/code&gt; and other called &lt;code&gt;wrds&lt;/code&gt;. The &lt;code&gt;wrds&lt;/code&gt; environment is specific to the &lt;a class=&#34;link&#34; href=&#34;https://wrds-www.wharton.upenn.edu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wharton Research Data Services&lt;/a&gt; which requires (for some reason) an older package of nympy.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;general&amp;rdquo; environment covers everything else. I created it with the usual command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python -m venv ~/python-virtual-envs/general
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once created, it can be activated (either in a terminal or an IDE such as VS Code) by executing the following in the terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ source ~/python-virtual-envs/general/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-python-pip&#34;&gt;Using python-pip
&lt;/h2&gt;&lt;p&gt;After the virtual environment is created and activated, modules can be installed by using python-pip, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install &amp;lt;package-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to view all installed modules, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or the outdated modules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip list --outdated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And updated at a later point in time with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip install --upgrade &amp;lt;package-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;maintaining-across-multiple-systems&#34;&gt;Maintaining Across Multiple Systems
&lt;/h2&gt;&lt;p&gt;To avoid having to redundantly install modules on different systems, after I make a change to the virtual environment I zip the entire &lt;code&gt;~/python-virtual-envs/&lt;/code&gt; directory and upload the zip file to Dropbox. This takes less than a minute, and if I am working on a different system can simply extract the archive and have a completely up-to-date and current virtual environment to work in.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/3/library/venv.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.python.org/3/library/venv.html&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://pypi.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pypi.org/&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://note.nkmk.me/en/python-pip-usage/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://note.nkmk.me/en/python-pip-usage/&lt;/a&gt;&lt;/br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://wiki.archlinux.org/title/Python&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wiki.archlinux.org/title/Python&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Arch Linux Install</title>
        <link>https://www.jaredszajkowski.com/2023/09/29/arch-linux-install/</link>
        <pubDate>Fri, 29 Sep 2023 00:00:01 +0000</pubDate>
        
        <guid>https://www.jaredszajkowski.com/2023/09/29/arch-linux-install/</guid>
        <description>&lt;img src="https://www.jaredszajkowski.com/2023/09/29/arch-linux-install/cover.jpg" alt="Featured image of post Arch Linux Install" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;This is the basic framework that I use to install Arch Linux, with a few changes catered to the Lenovo ThinkPad E15 Gen 2. I have found that this is a decent mid range laptop, excellent linux compatibility, great keyboard, and overall provides a good value.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting started
&lt;/h2&gt;&lt;p&gt;This tutorial assumes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are booting from a USB drive with the Arch install ISO.&lt;/li&gt;
&lt;li&gt;Wireless or wired network is detected and drivers are configured automatically.&lt;/li&gt;
&lt;li&gt;You want drive encrytion on your root partition, but not on your boot/efi/swap partitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;verify-uefi-boot-mode&#34;&gt;Verify UEFI boot mode
&lt;/h3&gt;&lt;p&gt;The following command should show directory without error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ls /sys/firmware/efi/efivars
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configure-wireless-network&#34;&gt;Configure wireless network
&lt;/h3&gt;&lt;p&gt;The following command will drop you into the iwd daemon:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# iwctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# device list
# station *device* scan
# station *device* get-networks
# station *device* connect *SSID*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;verify-internet-connectivity&#34;&gt;Verify internet connectivity
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# ping archlinux.org
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-system-clock&#34;&gt;Update system clock
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# timedatectl set-ntp true
# timedatectl status
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;disks-partition-table--partitions&#34;&gt;Disks, partition table &amp;amp; partitions
&lt;/h2&gt;&lt;p&gt;The following assumes that your NVME drive is found as /dev/nvme0n1. Partitions will then be /dev/nvme0n1p1 and so on.&lt;/p&gt;
&lt;h3 id=&#34;wipe-disk&#34;&gt;Wipe disk
&lt;/h3&gt;&lt;p&gt;List disks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# fdisk -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wipe all file system records:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# wipefs -a /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-new-partition-table&#34;&gt;Create new partition table
&lt;/h3&gt;&lt;p&gt;Open nvme0n1 with gdisk:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# gdisk /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create GPT partition table with option &amp;ldquo;o&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;create-efi-partition&#34;&gt;Create EFI partition
&lt;/h3&gt;&lt;p&gt;Create new EFI partition w/ 550mb with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #1
Default starting sector
+550M
Change partition type to EFI System (ef00)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-boot-partition&#34;&gt;Create boot partition
&lt;/h3&gt;&lt;p&gt;Create new boot partition w/ 550mb with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #2
Default starting sector
+550M
Leave default type of 8300
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-swap-partition&#34;&gt;Create swap partition
&lt;/h3&gt;&lt;p&gt;The old rule of thumb used to be that a swap partition should be the same size as the amount of memory in the system, but given the typical amount of memory in modern systems this is obviously no longer necessary. For my system with 16 or 32 GB of memory, a swap of 8 GB is rarely even used.&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;Create new Swap partition w/ 8GB with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #3
Default starting sector
+8G
Change to linux swap (8200)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-root-partition&#34;&gt;Create root partition
&lt;/h3&gt;&lt;p&gt;Create new root partition w/ remaining disk space with option &amp;ldquo;n&amp;rdquo;, using the following parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Partition #4
Default starting sector
Remaining space
Linux LUKS type 8309
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then exit gdisk.&lt;/p&gt;
&lt;h2 id=&#34;write-file-systems&#34;&gt;Write file systems
&lt;/h2&gt;&lt;h3 id=&#34;efi-partition&#34;&gt;EFI partition
&lt;/h3&gt;&lt;p&gt;Write file system to new EFI System partition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat /dev/zero &amp;gt; /dev/nvme0n1p1 
# mkfs.fat -F32 /dev/nvme0n1p1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;boot-partition&#34;&gt;Boot partition
&lt;/h3&gt;&lt;p&gt;Then boot partition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat /dev/zero &amp;gt; /dev/nvme0n1p2 
# mkfs.ext2 /dev/nvme0n1p2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;root-partition&#34;&gt;Root partition
&lt;/h3&gt;&lt;p&gt;Prepare root partition w/ LUKS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cryptsetup -y -v luksFormat --type luks2 /dev/nvme0n1p4
# cryptsetup luksDump /dev/nvme0n1p4
# cryptsetup open /dev/nvme0n1p4 archcryptroot
# mkfs.ext4 /dev/mapper/archcryptroot
# mount /dev/mapper/archcryptroot /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;em&gt;archcryptroot&lt;/em&gt; for the name of my encrypted volume, but change as necessary.&lt;/p&gt;
&lt;h3 id=&#34;swap-partition&#34;&gt;Swap partition
&lt;/h3&gt;&lt;p&gt;Then swap:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkswap /dev/nvme0n1p3
# swapon /dev/nvme0n1p3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-mount-points&#34;&gt;Create mount points
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# mkdir /mnt/boot
# mount /dev/nvme0n1p2 /mnt/boot
# mkdir /mnt/boot/efi
# mount /dev/nvme0n1p1 /mnt/boot/efi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-install&#34;&gt;System install
&lt;/h2&gt;&lt;h3 id=&#34;install-base-packages&#34;&gt;Install base packages
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# pacstrap /mnt base base-devel linux linux-firmware grub-efi-x86_64 efibootmgr
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-fstab&#34;&gt;Generate fstab
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;enter-new-system&#34;&gt;Enter new system
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# arch-chroot /mnt /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-clock&#34;&gt;Set clock
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# ln -sf /usr/share/zoneinfo/America/Chicago /etc/localtime
# hwclock –systohc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generate-locale&#34;&gt;Generate locale
&lt;/h3&gt;&lt;p&gt;In /etc/locale.gen &lt;strong&gt;uncomment only&lt;/strong&gt;: en_US.UTF-8 UTF-8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# locale-gen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In /etc/locale.conf, you should &lt;strong&gt;only&lt;/strong&gt; have this line: LANG=en_US.UTF-8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# nano /etc/locale.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-hostname--update-hosts&#34;&gt;Set hostname &amp;amp; update hosts
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# echo linuxmachine &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update /etc/hosts with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost
::1         localhost
127.0.1.1   linuxmachine.localdomain    linuxmachine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-root-password&#34;&gt;Set root password
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# passwd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-etcmkinitcpioconf--generate-initrd-image&#34;&gt;Update /etc/mkinitcpio.conf &amp;amp; generate initrd image
&lt;/h3&gt;&lt;p&gt;Edit /etc/mkinitcpio.conf with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HOOKS=(base udev autodetect modconf block keymap encrypt resume filesystems keyboard fsck)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkinitcpio -p linux
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-grub&#34;&gt;Install grub
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit /etc/default/grub so it includes a statement like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;cryptdevice=/dev/nvme0n1p4:archcryptroot resume=/dev/nvme0n1p3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate final grub configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;exit--reboot&#34;&gt;Exit &amp;amp; reboot
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;# exit
# umount -R /mnt
# swapoff -a
# reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be continued.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
