<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>OpenPyXL on Jared Szajkowski</title>
        <link>https://www.jaredszajkowski.com/tags/openpyxl/</link>
        <description>Recent content in OpenPyXL on Jared Szajkowski</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 26 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.jaredszajkowski.com/tags/openpyxl/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nasdaq Data Link Tables API Data Retrieval</title>
        <link>https://www.jaredszajkowski.com/2023/12/24/nasdaq-data-link-tables-api-data-retrieval/</link>
        <pubDate>Sun, 24 Dec 2023 00:00:01 +0000</pubDate>
        
        <guid>https://www.jaredszajkowski.com/2023/12/24/nasdaq-data-link-tables-api-data-retrieval/</guid>
        <description>&lt;img src="https://www.jaredszajkowski.com/2023/12/24/nasdaq-data-link-tables-api-data-retrieval/cover.jpg" alt="Featured image of post Nasdaq Data Link Tables API Data Retrieval" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In this tutorial, we will write a python function that pulls data from Nasdaq Data Link through the tables API, adds relevant columns that are not present in the raw data, updates columns to allow for ease of use, and leaves the data in a format where it can then be used in time series analysis.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nasdaq.com/nasdaq-data-link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nasdaq Data Link&lt;/a&gt; is a provider of numerous different types of financial data from many different asset classes. It provides API&amp;rsquo;s that allow access from Python, R, Excel, and other methods. It is available to &lt;a class=&#34;link&#34; href=&#34;https://data.nasdaq.com/institutional-investors&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;institutional investors&lt;/a&gt; as well as &lt;a class=&#34;link&#34; href=&#34;https://data.nasdaq.com/individual-users&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;individual retail investors&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Cleaning A Bloomberg Data Excel Export</title>
        <link>https://www.jaredszajkowski.com/2023/11/15/cleaning-bloomberg-excel-export/</link>
        <pubDate>Wed, 15 Nov 2023 00:00:01 +0000</pubDate>
        
        <guid>https://www.jaredszajkowski.com/2023/11/15/cleaning-bloomberg-excel-export/</guid>
        <description>&lt;img src="https://www.jaredszajkowski.com/2023/11/15/cleaning-bloomberg-excel-export/cover.jpg" alt="Featured image of post Cleaning A Bloomberg Data Excel Export" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In this tutorial, we will write a python function that imports an excel export from Bloomberg, removes ancillary rows and columns, and leaves the data in a format where it can then be used in time series analysis.&lt;/p&gt;
&lt;h2 id=&#34;example-of-a-bloomberg-excel-export&#34;&gt;Example of a Bloomberg excel export
&lt;/h2&gt;&lt;p&gt;We will use the SPX index data in this example. Exporting the data from Bloomberg using the excel Bloomberg add-on yields data in the following format:&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
